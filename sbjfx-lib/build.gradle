apply plugin: 'io.spring.dependency-management'
apply plugin: 'java'
apply plugin: 'kotlin'
apply plugin: 'idea'
apply plugin: 'application'
apply plugin: 'kotlin-kapt'
apply plugin: 'org.openjfx.javafxplugin'
apply plugin: 'org.jetbrains.dokka'
apply plugin: 'maven-publish'
apply plugin: 'signing'

dependencies {
    implementation "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    implementation "org.springframework.boot:spring-boot:$springBootVersion"
    implementation "org.jetbrains.kotlin:kotlin-reflect:$kotlinVersion"
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlinVersion"
    implementation "io.github.microutils:kotlin-logging-jvm:$kotlinLoggingVersion"

    testImplementation 'org.slf4j:slf4j-simple:2.0.5'
    testImplementation 'org.assertj:assertj-core:3.23.1'
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.9.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-engine:5.9.0'
    testImplementation 'org.testfx:testfx-core:4.0.16-alpha'
    testImplementation 'org.testfx:testfx-junit5:4.0.16-alpha'
    testImplementation 'org.testfx:openjfx-monocle:jdk-12.0.1+2'
    testImplementation 'io.mockk:mockk:1.13.3'
}

group = 'net.lustenauer'
version = '0.0.4'
description = 'sbjfx-lib'
java.sourceCompatibility = JavaVersion.VERSION_11

java {
    withSourcesJar()
    withJavadocJar()
}

javafx {
    version = "$javafxVersion"
    modules = ['javafx.controls', 'javafx.fxml']
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
}

test {
    useJUnitPlatform {
        jvmArgs += "-Dheadless=true"
    }
}

repositories {
    mavenCentral()
}

publishing {
    publications {
        mavenJava(MavenPublication) {
            from components.java

            // create the sign pom artifact
            pom {
                name = 'SBJFX'
                description = 'This is a port of the library springboot-java-fx-support by Felix Roske to Kotlin and JAVAFX11. Information on the original can be found at https://github.com/roskenet/springboot-javafx-support'
                url = 'https://github.com/incluedu/sbjfx'
                inceptionYear = '2022'

                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'incluedu'
                        name = 'Patric Hollenstein'
                        email = 'patric.hollenstein@lustenauer.net'
                    }
                }

                scm {
                    connection = 'scm:git:git://github.com/incluedu/sbjfx.git'
                    developerConnection = 'scm:git:ssh://github.com/incluedu/sbjfx.git'
                    url = 'https://github.com/incluedu/sbjfx'
                }
            }
        }
    }
    repositories {
        maven {
            name = "OSSRH"
            url = "https://oss.sonatype.org/service/local/staging/deploy/maven2"
            credentials {
                username = project.findProperty("nexusUsername") ?: System.getenv("MAVEN_USERNAME")
                password = project.findProperty("nexusPassword") ?: System.getenv("MAVEN_PASSWORD")
            }
        }
        maven {
            name = "GitHubPackages"
            url = uri("https://maven.pkg.github.com/incluedu/sbjfx")
            credentials {
                username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_USERNAME")
                password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
            }
        }
    }

}

signing {
    def signingKeyId = findProperty("signingKeyId")
    def signingKey = findProperty("signingKey")
    def signingPassword = findProperty("signingPassword")
    useInMemoryPgpKeys(signingKeyId, signingKey, signingPassword)
    sign publishing.publications.mavenJava
}

javadoc {
    if (JavaVersion.current().isJava9Compatible()) {
        options.addBooleanOption('html5', true)
    }
}
